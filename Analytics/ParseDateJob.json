{
	"jobConfig": {
		"name": "ParseDateJob",
		"description": "",
		"role": "arn:aws:iam::767397759186:role/LabRole",
		"command": "glueetl",
		"version": "4.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": 10,
		"maxCapacity": 10,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "ParseDateJob.py",
		"scriptLocation": "s3://aws-glue-assets-767397759186-us-east-1/scripts/",
		"language": "python-3",
		"spark": true,
		"sparkConfiguration": "standard",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-05-21T12:58:25.263Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-767397759186-us-east-1/temporary/",
		"logging": true,
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"metrics": true,
		"observabilityMetrics": true,
		"pythonPath": "s3://aws-glue-studio-transforms-510798373988-prod-us-east-1/gs_common.py,s3://aws-glue-studio-transforms-510798373988-prod-us-east-1/gs_to_timestamp.py",
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-767397759186-us-east-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null
	},
	"hasBeenSaved": false,
	"script": "import sys\nfrom awsglue.transforms import *\nfrom awsglue.utils import getResolvedOptions\nfrom pyspark.context import SparkContext\nfrom awsglue.context import GlueContext\nfrom awsglue.job import Job\nfrom awsglue.dynamicframe import DynamicFrameCollection\nfrom awsglue.dynamicframe import DynamicFrame\nimport gs_to_timestamp\n\nfrom datetime import datetime\n\nfrom pyspark.sql.types import StringType, TimestampType\nfrom pyspark.sql.functions import udf, to_timestamp\n\nimport pytz\nimport dateutil.parser\n\nTZINFOS = { 'PDT': pytz.timezone('US/Pacific')}\n\ndef parse_date_to_iso(date_str):\n    try:\n        # Define the format and parse the date string\n        # dt = datetime.strptime(date_str, '%a %b %d %H:%M:%S %Z %Y')\n        dt = dateutil.parser.parse(date_str, tzinfos= TZINFOS)\n        # Convert to UTC and then to ISO format\n        dt_utc = dt.astimezone(pytz.UTC)\n        return dt_utc.isoformat()\n    except Exception as e:\n        return None\n        \nparse_date_to_iso_udf = udf(parse_date_to_iso, StringType())\n\ndef MyTransform(glueContext, dfc) -> DynamicFrameCollection:\n    dynamic_frame = dfc.select(list(dfc.keys())[0])\n    df = dynamic_frame.toDF()\n    \n    df.printSchema()\n    df.show(5)\n    \n    df = df.withColumn(\"date\", parse_date_to_iso_udf(df[\"date\"]))\n    \n    # df.printSchema()\n    # df.show(5)\n    \n    # df = df.withColumn(\"date\", to_timestamp(df[\"date\"]))\n    \n    df.printSchema()\n    df.show(5)\n    \n    new_dynamic_frame = DynamicFrame.fromDF(df, glueContext, \"new_dynamic_frame\")\n    return DynamicFrameCollection({\"new_dynamic_frame\": new_dynamic_frame}, glueContext)\n\n# Sample Glue script to use the transformation\n    \n    \nargs = getResolvedOptions(sys.argv, ['JOB_NAME'])\nsc = SparkContext()\nglueContext = GlueContext(sc)\nspark = glueContext.spark_session\njob = Job(glueContext)\njob.init(args['JOB_NAME'], args)\n\n# Script generated for node Amazon S3\nAmazonS3_node1716295829914 = glueContext.create_dynamic_frame.from_options(format_options={}, connection_type=\"s3\", format=\"parquet\", connection_options={\"paths\": [\"s3://ccbda-custbucket-test/product1/processed\"], \"recurse\": True}, transformation_ctx=\"AmazonS3_node1716295829914\")\n\n# Script generated for node Custom Transform\nCustomTransform_node1716295832723 = MyTransform(glueContext, DynamicFrameCollection({\"AmazonS3_node1716295829914\": AmazonS3_node1716295829914}, glueContext))\n\ntransformed_dynamic_frame = CustomTransform_node1716295832723.select(\"new_dynamic_frame\")\n\n# Script generated for node To Timestamp\nToTimestamp_node1716295836643 = transformed_dynamic_frame.gs_to_timestamp(colName=\"date\", colType=\"iso\")\n\n# Script generated for node AWS Glue Data Catalog\n# AWSGlueDataCatalog_node1716295840846 = glueContext.write_dynamic_frame.from_catalog(frame=transformed_dynamic_frame, database=\"tweetsdb\", table_name=\"cust_test_table_glue\", additional_options={\"enableUpdateCatalog\": True, \"updateBehavior\": \"UPDATE_IN_DATABASE\"}, transformation_ctx=\"AWSGlueDataCatalog_node1716295840846\")\n\nAWSGlueDataCatalog_node1716295840846 = glueContext.write_dynamic_frame.from_catalog(frame=ToTimestamp_node1716295836643, database=\"tweetsdb\", table_name=\"cust_test_table_glue\", transformation_ctx=\"AWSGlueDataCatalog_node1716298249101\")\n\n\njob.commit()"
}
